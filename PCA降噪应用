import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.decomposition import PCA

digits = datasets.load_digits()

X = digits.data
y = digits.target

noisy_digits = X + np.random.normal(0, 4, size = X.shape)   # 给原数据增加噪音

example_digits = noisy_digits[y==0,:][:10]   # 取出数字0的数据点
for num in range(1,10):   # 依次取出1-9的数据，和0的数据纵向拼接城一个数据集
    example_digits = np.vstack([example_digits, noisy_digits[y==num,:][:10]])


def plot_digits(data):   # 绘图函数
    fig, axes = plt.subplots(10, 10, figsize=(10,10),
                             subplot_kw={'xticks':[], 'yticks':[]},   # 去除坐标轴刻度 
                             gridspec_kw=dict(hspace=0.1, wspace=0.1))   # 设置子图间距
                             
    for i, ax in enumerate(axes.flat):
        ax.imshow(data[i].reshape(8,8),
                  cmap='binary',
                  interpolation='nearest',
                  clim=(0, 16))
    plt.show()


plot_digits(example_digits)   # 绘图原数据图形

pca = PCA(0.5).fit(noisy_digits)   # 按照0.5的方差解释率提取主成分
pca.n_components_   # 主成分居住

components = pca.transform(example_digits)   # 对原数据进行降维
filtered_digits = pca.inverse_transform(components)   # 对降维数据进行恢复
plot_digits(filtered_digits)   # 绘图恢复数据图形
