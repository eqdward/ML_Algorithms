# -*- coding: utf-8 -*-



import numpy as np
from metrics import accuracy_score



class LogisticRegression():
    
    def __init__(self):
        """初始化Logistic Regression模型"""
        self.coef_ = None
        self.intercept_ = None
        self._theta = None
    

    def _sigmoid(self, t):
        """定义sigmoid哈函数"""
        return 1 / (1. + np.exp(-t))   
    
    
    def fit(self, X_train, y_train, eta=0.01, n_iters=1e4):
        """训练数据，使用梯度下降法实现参数计算"""
        assert X_train.shape[0] == y_train.shape[0], "自变量和因变量数量一致"
        
        def LF(theta, X_b, y):
            """逻辑回归的损失函数"""
            """需提前构造好X_b"""
            y_hat = self._sigmoid(X_b.dot(theta))
            
            try:
                return - np.sum(y*np.log(y_hat) + (1-y)*np.log(1-y_hat)) / len(y)   # 返回损失函数
            except:
                return float(np.inf)
        
        def dLF(theta, X_b, y):
            """损失函数求导，即梯度"""
            return X_b.T.dot(self._sigmoid(X_b.dot(theta)) - y) / len(y)
        
        def gradient_descent(X_b, y, initial_theta, eta, n_iters, epsilon=1e-8):
            """梯度下降过程"""
            theta = initial_theta
            cur_iter= 0
            while cur_iter < n_iters:
                gradient = dLF(theta, X_b, y)
                last_theta = theta
                theta = theta - eta*gradient
                if abs(LF(theta, X_b, y) - LF(last_theta, X_b, y)) < epsilon:
                    break
                cur_iter += 1
            return theta
        
        X_b = np.hstack([np.ones((len(X_train), 1)), X_train])
        initial_theta = np.zeros(X_b.shape[1])
        
        self._theta = gradient_descent(X_b, y_train, initial_theta, eta, n_iters)
        self.intercept_ = self._theta[0]
        self.coef_ = self._theta[1:]
        
        return self
    
    
    def predict_proba(self, X_predict):
        """给定待预测数据集，返回预测概率"""
        assert self.intercept_ is not None and self.coef_ is not None, "须先fit数据"
        assert X_predict.shape[1] == len(self.coef_), "预测数据和训练数据自变量数量应一致"
        
        X_b = np.hstack([np.ones((len(X_predict),1)), X_predict])
        
        return self._sigmoid(X_b.dot(self._theta))
    
    
    def predict(self, X_predict):
        """返回预测结果（0|1）"""
        assert self.intercept_ is not None and self.coef_ is not None, "须先fit数据"
        assert X_predict.shape[1] == len(self.coef_), "预测数据和训练数据自变量数量应一致"
        proba = self.predict_proba(X_predict)
        return np.array(proba >= 0.5, dtype='int')
    
    
    def score(self, X_test, y_test):
        y_predict = self.predict(X_test)
        return accuracy_score(y_test, y_predict)
    
    def __repr__(self):
        return "LogsiticRegression()"



if __name__ == "__main__":
    
    import matplotlib.pyplot as plt
    from sklearn import datasets
    from model_selection import train_test_split

    
    iris = datasets.load_iris()
    X = iris.data
    y = iris.target
    
    X = X[y<2, :2]
    y = y[y<2]
    
    plt.scatter(X[y==0,0], X[y==0,1], color="red")
    plt.scatter(X[y==1,0], X[y==1,1], color="blue")
    plt.show()
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_ratio=0.2, random_seed=666)
        
        
    log_reg = LogisticRegression()
    log_reg.fit(X_train, y_train)
    
    log_reg.intercept_
    log_reg.coef_
    
    log_reg.score(X_test, y_test)
    
    log_reg.predict_proba(X_test)
    log_reg.predict(X_test)
    
    
    
    """绘制决策边界"""
    def x2(x1):
        return (-log_reg.coef_[0] * x1 - log_reg.intercept_) / log_reg.coef_[1]
    
    x1_plot = np.linspace(4,8,1000)
    x2_plot = x2(x1_plot)
    
    plt.plot(x1_plot, x2_plot)
    plt.scatter(X[y==0,0], X[y==0,1], color="red")
    plt.scatter(X[y==1,0], X[y==1,1], color="blue")
    plt.show()
    
