#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import numpy as np
from math import sqrt

def accuracy_score(y_test, y_predict):
    """计算y_predict对y_test的预测准确率"""
    assert y_test.shape[0] == y_predict.shape[0], "y_test与y_predict大小一致"
    return np.sum(y_test == y_predict)/len(y_test)

def TN(y_test, y_predict):
    """计算预测值的TN"""
    assert len(y_test) == len(y_predict), "验证集的真实标签向量与预测标签向量大小应一致"
    return np.sum((y_test == 0) & (y_predict == 0))

def FP(y_test, y_predict):
    """计算预测值的FP"""
    assert len(y_test) == len(y_predict), "验证集的真实标签向量与预测标签向量大小应一致"
    return np.sum((y_test == 0) & (y_predict == 1))

def FN(y_test, y_predict):
    """计算预测值的FN"""
    assert len(y_test) == len(y_predict), "验证集的真实标签向量与预测标签向量大小应一致"    
    return np.sum((y_test == 1) & (y_predict == 0))

def TP(y_test, y_predict):
    """计算预测值的TP"""
    assert len(y_test) == len(y_predict), "验证集的真实标签向量与预测标签向量大小应一致"
    return np.sum((y_test == 1) & (y_predict == 1))

def confusion_matrix(y_test, y_predict):
    """计算混淆矩阵"""
    assert len(y_test) == len(y_predict), "验证集的真实标签向量与预测标签向量大小应一致"    
    return np.array([
            [TN(y_test, y_predict), FP(y_test, y_predict)],
            [FN(y_test, y_predict), TP(y_test, y_predict)]
            ])

def precision_score(y_test, y_predict):
    """计算预测的精准率"""
    tp = TP(y_test, y_predict)
    fp = FP(y_test, y_predict)
    try:
        return tp/(tp+fp)
    except:
        return 0.0

def recall_score(y_test, y_predict):
    """计算预测的召回率"""
    tp = TP(y_test, y_predict)
    fn = FN(y_test, y_predict)
    try:
        return tp/(tp+fn)
    except:
        return 0.0

def f1_score(precision, recall):
    """计算F1 score"""
    try:
        return 2 * precision * recall / (precision + recall)
    except:
        return 0.0

def TPR(y_test, y_predict):
    """计算TPR"""
    tp = TP(y_test, y_predict)
    fn = FN(y_test, y_predict)
    try:
        return tp / (tp + fn)
    except:
        return 0.0

def FPR(y_test, y_predict):
    """计算FPR"""
    fp = FP(y_test, y_predict)
    tn = TN(y_test, y_predict)
    try:
        return fp / (fp + tn)
    except:
        return 0.0

def mean_squared_error(y_test, y_predict):
    """计算y_test和y_predict之间的MSE"""
    assert len(y_test) == len(y_predict), "真实值和预测值的数据量大小应一致"
    return np.sum((y_test - y_predict) ** 2) / len(y_test)

def root_mean_squared_error(y_test, y_predict):
    """计算y_test和y_predict之间的RMSE"""
    assert len(y_test) == len(y_predict), "真实值和预测值的数据量大小应一致"
    return sqrt(mean_squared_error(y_test, y_predict))

def mean_absolute_error(y_test, y_predict):
    """计算y_test和y_predict之间的MAE"""
    assert len(y_test) == len(y_predict), "真实值和预测值的数据量大小应一致"
    return np.sum(np.absolute(y_test - y_predict)) / len(y_test)


def r2_score(y_test, y_predict):
    """计算y_test和y_predict之间的R Squared"""
    assert len(y_test) == len(y_predict), "真实值和预测值的数据量大小应一致"
    return 1 - mean_squared_error(y_test, y_predict) / np.var(y_test)

