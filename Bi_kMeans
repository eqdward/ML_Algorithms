#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Bi_kMeans聚类"""


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


def get_dist(pt1, pt2):
    """计算两个点的欧式距离"""
    
    assert pt1.shape == pt2.shape, "两个点的维度特征应一致"
    return np.sqrt(np.sum((pt1 - pt2)**2))


def get_randCenters(data, k):
    """随机生成k个簇心"""
    
    n = data.shape[1]   # 簇心的维度与输入数据的维度一致
    min_data = np.array(data.min(axis = 0)).reshape(1,n)   # 数据各维度的最小值
    max_data = np.array(data.max(axis = 0)).reshape(1,n)   # 数据各维度的最大值
    centers = min_data + (max_data - min_data) * np.random.rand(k, n)   # 生成簇心，介于维度的界值内
    
    return centers


def plot_kMeans(clustered_data, cluster_centers):
    """绘制kMeans分类结果"""

    for i in range(len(cluster_centers)):
        color = ['red', 'green', 'blue', 'yellow', 'grey']   # 可根据类别数量延伸
        temp_data = clustered_data[clustered_data[:,2]==i]   # 筛选第i类数据
        plt.scatter(temp_data[:,0], temp_data[:,1],color=color[i])   # 绘制第i类数据
        plt.scatter(cluster_centers[i,0], cluster_centers[i,1],color=color[i], marker='x', s = 100)   # # 绘制第i类数据的簇心
        
    plt.show()
   

def Bi_kMeans(data, k=2):
    """单次kMeans聚类"""
    """k为类别数"""
    m = data.shape[0]
    center0 = data.mean(axis=0)
    centList = [center0]  # 创建簇心列表
    results = np.zeros((m, 2))
    
    for j in range(m):  # 计算所有数据点与簇心0的距离
        results[j, 1] = get_dist(center0, data[j, :])
    
    while (len(centList) < 4):
        lowestSSE = np.inf
        for i in range(len(centList)):
            temp_data = data[results[:,0]==i]
            initial_cents, clustered_data, cluster_cents = kMeans(temp_data, k=2)
    
            sse_clustered = clustered_data[:,-1].sum()
            sse_not_clustered = data[results[:,0]!=i][:,-1].sum()
            
            if (sse_clustered + sse_not_clustered) < lowestSSE:
                lowestSSE = sse_clustered + sse_not_clustered
                be_clustered_data = i   # 被二分的数据原归属的类别
                new_cluster_cents = cluster_cents   # 二分数据的簇心
                new_clustered_data = clustered_data[:,-2:].copy()   # 被二分数据的聚类结果
    
        centList[be_clustered_data] = new_cluster_cents[0,:]
        centList.append(new_cluster_cents[1,:])
        
        new_clustered_data = pd.DataFrame(new_clustered_data)
        new_clustered_data.iloc[:,0].replace(1, len(centList)-1, inplace=True)
        new_clustered_data.iloc[:,0].replace(0, be_clustered_data, inplace=True)
        
        results[results[:,0]==be_clustered_data] = new_clustered_data.values
        
    clustered_results = np.hstack((data, results))
    
    return clustered_results, np.array(centList)


if __name__ == "__main__":

    from kMeans import kMeans

    data = pd.read_csv(r'Desktop/ML_Algorithms/machinelearninginaction-master/Ch10/testSet.csv', header=None).values
    plt.scatter(data[:,0], data[:,1])
    plt.show()
       
    clustered_results, centList = Bi_kMeans(data)
    plot_kMeans(clustered_results, np.array(centList))
